// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: shared/ptypes.proto

package shared

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InvoiceTransportService_SaveInvoice_FullMethodName = "/InvoiceTransportService/SaveInvoice"
)

// InvoiceTransportServiceClient is the client API for InvoiceTransportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoiceTransportServiceClient interface {
	SaveInvoice(ctx context.Context, in *SaveInvoiceRequest, opts ...grpc.CallOption) (*SaveInvoiceResponse, error)
}

type invoiceTransportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceTransportServiceClient(cc grpc.ClientConnInterface) InvoiceTransportServiceClient {
	return &invoiceTransportServiceClient{cc}
}

func (c *invoiceTransportServiceClient) SaveInvoice(ctx context.Context, in *SaveInvoiceRequest, opts ...grpc.CallOption) (*SaveInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveInvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceTransportService_SaveInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceTransportServiceServer is the server API for InvoiceTransportService service.
// All implementations must embed UnimplementedInvoiceTransportServiceServer
// for forward compatibility.
type InvoiceTransportServiceServer interface {
	SaveInvoice(context.Context, *SaveInvoiceRequest) (*SaveInvoiceResponse, error)
	mustEmbedUnimplementedInvoiceTransportServiceServer()
}

// UnimplementedInvoiceTransportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInvoiceTransportServiceServer struct{}

func (UnimplementedInvoiceTransportServiceServer) SaveInvoice(context.Context, *SaveInvoiceRequest) (*SaveInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveInvoice not implemented")
}
func (UnimplementedInvoiceTransportServiceServer) mustEmbedUnimplementedInvoiceTransportServiceServer() {
}
func (UnimplementedInvoiceTransportServiceServer) testEmbeddedByValue() {}

// UnsafeInvoiceTransportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoiceTransportServiceServer will
// result in compilation errors.
type UnsafeInvoiceTransportServiceServer interface {
	mustEmbedUnimplementedInvoiceTransportServiceServer()
}

func RegisterInvoiceTransportServiceServer(s grpc.ServiceRegistrar, srv InvoiceTransportServiceServer) {
	// If the following call pancis, it indicates UnimplementedInvoiceTransportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InvoiceTransportService_ServiceDesc, srv)
}

func _InvoiceTransportService_SaveInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceTransportServiceServer).SaveInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceTransportService_SaveInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceTransportServiceServer).SaveInvoice(ctx, req.(*SaveInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoiceTransportService_ServiceDesc is the grpc.ServiceDesc for InvoiceTransportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoiceTransportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InvoiceTransportService",
	HandlerType: (*InvoiceTransportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveInvoice",
			Handler:    _InvoiceTransportService_SaveInvoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/ptypes.proto",
}

const (
	GetterInvoiceTransportService_GetInvoice_FullMethodName = "/GetterInvoiceTransportService/GetInvoice"
)

// GetterInvoiceTransportServiceClient is the client API for GetterInvoiceTransportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetterInvoiceTransportServiceClient interface {
	GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error)
}

type getterInvoiceTransportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetterInvoiceTransportServiceClient(cc grpc.ClientConnInterface) GetterInvoiceTransportServiceClient {
	return &getterInvoiceTransportServiceClient{cc}
}

func (c *getterInvoiceTransportServiceClient) GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceResponse)
	err := c.cc.Invoke(ctx, GetterInvoiceTransportService_GetInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetterInvoiceTransportServiceServer is the server API for GetterInvoiceTransportService service.
// All implementations must embed UnimplementedGetterInvoiceTransportServiceServer
// for forward compatibility.
type GetterInvoiceTransportServiceServer interface {
	GetInvoice(context.Context, *GetInvoiceRequest) (*GetInvoiceResponse, error)
	mustEmbedUnimplementedGetterInvoiceTransportServiceServer()
}

// UnimplementedGetterInvoiceTransportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGetterInvoiceTransportServiceServer struct{}

func (UnimplementedGetterInvoiceTransportServiceServer) GetInvoice(context.Context, *GetInvoiceRequest) (*GetInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedGetterInvoiceTransportServiceServer) mustEmbedUnimplementedGetterInvoiceTransportServiceServer() {
}
func (UnimplementedGetterInvoiceTransportServiceServer) testEmbeddedByValue() {}

// UnsafeGetterInvoiceTransportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetterInvoiceTransportServiceServer will
// result in compilation errors.
type UnsafeGetterInvoiceTransportServiceServer interface {
	mustEmbedUnimplementedGetterInvoiceTransportServiceServer()
}

func RegisterGetterInvoiceTransportServiceServer(s grpc.ServiceRegistrar, srv GetterInvoiceTransportServiceServer) {
	// If the following call pancis, it indicates UnimplementedGetterInvoiceTransportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GetterInvoiceTransportService_ServiceDesc, srv)
}

func _GetterInvoiceTransportService_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetterInvoiceTransportServiceServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetterInvoiceTransportService_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetterInvoiceTransportServiceServer).GetInvoice(ctx, req.(*GetInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetterInvoiceTransportService_ServiceDesc is the grpc.ServiceDesc for GetterInvoiceTransportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetterInvoiceTransportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GetterInvoiceTransportService",
	HandlerType: (*GetterInvoiceTransportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInvoice",
			Handler:    _GetterInvoiceTransportService_GetInvoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/ptypes.proto",
}

const (
	StreamingTransportSerivce_SensorDataStream_FullMethodName = "/StreamingTransportSerivce/SensorDataStream"
)

// StreamingTransportSerivceClient is the client API for StreamingTransportSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingTransportSerivceClient interface {
	SensorDataStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SensorDataRequest, SensorDataResponse], error)
}

type streamingTransportSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingTransportSerivceClient(cc grpc.ClientConnInterface) StreamingTransportSerivceClient {
	return &streamingTransportSerivceClient{cc}
}

func (c *streamingTransportSerivceClient) SensorDataStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SensorDataRequest, SensorDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamingTransportSerivce_ServiceDesc.Streams[0], StreamingTransportSerivce_SensorDataStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SensorDataRequest, SensorDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamingTransportSerivce_SensorDataStreamClient = grpc.BidiStreamingClient[SensorDataRequest, SensorDataResponse]

// StreamingTransportSerivceServer is the server API for StreamingTransportSerivce service.
// All implementations must embed UnimplementedStreamingTransportSerivceServer
// for forward compatibility.
type StreamingTransportSerivceServer interface {
	SensorDataStream(grpc.BidiStreamingServer[SensorDataRequest, SensorDataResponse]) error
	mustEmbedUnimplementedStreamingTransportSerivceServer()
}

// UnimplementedStreamingTransportSerivceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamingTransportSerivceServer struct{}

func (UnimplementedStreamingTransportSerivceServer) SensorDataStream(grpc.BidiStreamingServer[SensorDataRequest, SensorDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SensorDataStream not implemented")
}
func (UnimplementedStreamingTransportSerivceServer) mustEmbedUnimplementedStreamingTransportSerivceServer() {
}
func (UnimplementedStreamingTransportSerivceServer) testEmbeddedByValue() {}

// UnsafeStreamingTransportSerivceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingTransportSerivceServer will
// result in compilation errors.
type UnsafeStreamingTransportSerivceServer interface {
	mustEmbedUnimplementedStreamingTransportSerivceServer()
}

func RegisterStreamingTransportSerivceServer(s grpc.ServiceRegistrar, srv StreamingTransportSerivceServer) {
	// If the following call pancis, it indicates UnimplementedStreamingTransportSerivceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamingTransportSerivce_ServiceDesc, srv)
}

func _StreamingTransportSerivce_SensorDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingTransportSerivceServer).SensorDataStream(&grpc.GenericServerStream[SensorDataRequest, SensorDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamingTransportSerivce_SensorDataStreamServer = grpc.BidiStreamingServer[SensorDataRequest, SensorDataResponse]

// StreamingTransportSerivce_ServiceDesc is the grpc.ServiceDesc for StreamingTransportSerivce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamingTransportSerivce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamingTransportSerivce",
	HandlerType: (*StreamingTransportSerivceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SensorDataStream",
			Handler:       _StreamingTransportSerivce_SensorDataStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "shared/ptypes.proto",
}
